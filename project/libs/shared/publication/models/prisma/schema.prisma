// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../../../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model VideoPublic {
  id       String    @id @default(uuid())
  title    String
  link     String
  tags     Tag[]
  comments Comment[]
  likes    Like[]
  createAt DateTime  @default(now()) @map("create_at")
  updateAt DateTime  @updatedAt @map("update_at")
  userId   String    @map("user_id")
  tagId    String?

  @@index([title])
  @@map("video_publics")
}

model TextPublic {
  id       String    @id @default(uuid())
  title    String
  notice   String
  text     String
  tags     Tag[]
  comments Comment[]
  likes    Like[]
  createAt DateTime  @default(now()) @map("create_at")
  updateAt DateTime  @updatedAt @map("update_at")
  userId   String    @map("user_id")

  @@index([title])
  @@map("text_publics")
}

model QuotePublic {
  id       String    @id @default(uuid())
  text     String
  author   String
  tags     Tag[]
  comments Comment[]
  likes    Like[]
  createAt DateTime  @default(now()) @map("create_at")
  updateAt DateTime  @updatedAt @map("update_at")
  userId   String    @map("user_id")

  @@index([author])
  @@map("quote_publics")
}

model PhotoPublic {
  id       String    @id @default(uuid())
  photo    String
  tags     Tag[]
  comments Comment[]
  likes    Like[]
  createAt DateTime  @default(now()) @map("create_at")
  updateAt DateTime  @updatedAt @map("update_at")
  userId   String    @map("user_id")

  @@map("photo_publics")
}

model LinkPublic {
  id          String    @id @default(uuid())
  link        String
  description String
  tags        Tag[]
  comments    Comment[]
  likes       Like[]
  createAt    DateTime  @default(now()) @map("create_at")
  updateAt    DateTime  @updatedAt @map("update_at")
  userId      String    @map("user_id")

  @@map("link_publics")
}

model Tag {
  id           String        @id @default(uuid())
  title        String
  videoPublics VideoPublic[]
  textPublics  TextPublic[]
  quotePublic  QuotePublic[]
  photoPublics PhotoPublic[]
  linkPublics  LinkPublic[]
  createAt     DateTime      @default(now()) @map("create_at")
  updateAt     DateTime      @updatedAt @map("update_at")

  @@index([title])
  @@map("tags")
}

model Comment {
  id            String      @id @default(uuid())
  text          String
  videoPublic   VideoPublic @relation(fields: [videoPublicId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  videoPublicId String      @map("video_public_id")
  textPublic    TextPublic  @relation(fields: [textPublicId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  textPublicId  String      @map("text_public_id")
  quotePublic   QuotePublic @relation(fields: [quotePublicId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  quotePublicId String      @map("quote_public_id")
  photoPublic   PhotoPublic @relation(fields: [photoPublicId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  photoPublicId String      @map("photo_public_id")
  linkPublic    LinkPublic  @relation(fields: [linkPublicId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  linkPublicId  String      @map("link_public_id")
  userId        String      @map("user_id")

  createAt DateTime @default(now()) @map("create_at")
  updateAt DateTime @updatedAt @map("update_at")

  @@index([videoPublicId, textPublicId, quotePublicId, photoPublicId, linkPublicId])
  @@map("comments")
}

model Like {
  id     String @id @default(uuid())
  userId String @map("user_id")

  createAt      DateTime    @default(now()) @map("create_at")
  updateAt      DateTime    @updatedAt @map("update_at")
  videoPublic   VideoPublic @relation(fields: [videoPublicId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  videoPublicId String      @map("video_public_id")
  textPublic    TextPublic  @relation(fields: [textPublicId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  textPublicId  String      @map("text_public_id")
  quotePublic   QuotePublic @relation(fields: [quotePublicId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  quotePublicId String      @map("quote_public_id")
  photoPublic   PhotoPublic @relation(fields: [photoPublicId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  photoPublicId String      @map("photo_public_id")
  linkPublic    LinkPublic  @relation(fields: [linkPublicId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  linkPublicId  String      @map("link_public_id")

  @@index([videoPublicId, textPublicId, quotePublicId, photoPublicId, linkPublicId])
  @@map("likes")
}
