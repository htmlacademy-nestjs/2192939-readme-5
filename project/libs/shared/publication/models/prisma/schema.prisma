// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../../../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model VideoPublic {
  id       String               @id @default(uuid())
  title    String
  link     String
  userId   String               @map("user_id")
  createAt DateTime             @default(now()) @map("create_at")
  updateAt DateTime             @updatedAt @map("update_at")
  tags     VideoPublicTag[]
  comments VideoPublicComment[]
  likes    VideoPublicLike[]

  @@index([title])
  @@map("video_publics")
}

model VideoPublicTag {
  id            String      @id @default(uuid())
  title         String
  videoPublics  VideoPublic @relation(fields: [videoPublicId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  videoPublicId String      @map("video_public_id")
  createAt      DateTime    @default(now()) @map("create_at")
  updateAt      DateTime    @updatedAt @map("update_at")

  @@index([title])
  @@map("video_public_tags")
}

model VideoPublicComment {
  id            String      @id @default(uuid())
  text          String
  userId        String      @map("user_id")
  videoPublic   VideoPublic @relation(fields: [videoPublicId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  videoPublicId String      @map("video_public_id")
  createAt      DateTime    @default(now()) @map("create_at")
  updateAt      DateTime    @updatedAt @map("update_at")

  @@index([videoPublicId])
  @@map("video_public_comments")
}

model VideoPublicLike {
  id            String      @id @default(uuid())
  userId        String      @map("user_id")
  videoPublic   VideoPublic @relation(fields: [videoPublicId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  videoPublicId String      @map("video_public_id")
  createAt      DateTime    @default(now()) @map("create_at")
  updateAt      DateTime    @updatedAt @map("update_at")

  @@index([videoPublicId])
  @@map("video_public_likes")
}

model TextPublic {
  id       String              @id @default(uuid())
  title    String
  notice   String
  text     String
  userId   String              @map("user_id")
  createAt DateTime            @default(now()) @map("create_at")
  updateAt DateTime            @updatedAt @map("update_at")
  tags     TextPublicTag[]
  comments TextPublicComment[]
  likes    TextPublicLike[]

  @@index([title])
  @@map("text_publics")
}

model TextPublicTag {
  id          String       @id @default(uuid())
  title       String
  textPublics TextPublic[]
  createAt    DateTime     @default(now()) @map("create_at")
  updateAt    DateTime     @updatedAt @map("update_at")

  @@index([title])
  @@map("text_public_tags")
}

model TextPublicComment {
  id           String     @id @default(uuid())
  text         String
  userId       String     @map("user_id")
  textPublic   TextPublic @relation(fields: [textPublicId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  textPublicId String     @map("text_public_id")
  createAt     DateTime   @default(now()) @map("create_at")
  updateAt     DateTime   @updatedAt @map("update_at")

  @@index([textPublicId])
  @@map("text_public_comments")
}

model TextPublicLike {
  id           String     @id @default(uuid())
  userId       String     @map("user_id")
  textPublic   TextPublic @relation(fields: [textPublicId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  textPublicId String     @map("text_public_id")
  createAt     DateTime   @default(now()) @map("create_at")
  updateAt     DateTime   @updatedAt @map("update_at")

  @@index([textPublicId])
  @@map("text_public_likes")
}

model QuotePublic {
  id       String               @id @default(uuid())
  text     String
  author   String
  userId   String               @map("user_id")
  tags     QuotePublicTag[]
  comments QuotePublicComment[]
  likes    QuotePublicLike[]
  createAt DateTime             @default(now()) @map("create_at")
  updateAt DateTime             @updatedAt @map("update_at")

  @@index([author])
  @@map("quote_publics")
}

model QuotePublicTag {
  id          String        @id @default(uuid())
  title       String
  createAt    DateTime      @default(now()) @map("create_at")
  updateAt    DateTime      @updatedAt @map("update_at")
  quotePublic QuotePublic[]

  @@index([title])
  @@map("quote_public_tags")
}

model QuotePublicComment {
  id            String      @id @default(uuid())
  text          String
  userId        String      @map("user_id")
  quotePublic   QuotePublic @relation(fields: [quotePublicId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  quotePublicId String      @map("quote_public_id")
  createAt      DateTime    @default(now()) @map("create_at")
  updateAt      DateTime    @updatedAt @map("update_at")

  @@index([quotePublicId])
  @@map("quote_public_comments")
}

model QuotePublicLike {
  id            String      @id @default(uuid())
  userId        String      @map("user_id")
  quotePublic   QuotePublic @relation(fields: [quotePublicId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  quotePublicId String      @map("quote_public_id")
  createAt      DateTime    @default(now()) @map("create_at")
  updateAt      DateTime    @updatedAt @map("update_at")

  @@index([quotePublicId])
  @@map("quote_public_likes")
}

model PhotoPublic {
  id       String               @id @default(uuid())
  photo    String
  userId   String               @map("user_id")
  createAt DateTime             @default(now()) @map("create_at")
  updateAt DateTime             @updatedAt @map("update_at")
  tags     PhotoPublicTag[]
  comments PhotoPublicComment[]
  likes    PhotoPublicLike[]

  @@map("photo_publics")
}

model PhotoPublicTag {
  id           String        @id @default(uuid())
  title        String
  createAt     DateTime      @default(now()) @map("create_at")
  updateAt     DateTime      @updatedAt @map("update_at")
  photoPublics PhotoPublic[]

  @@index([title])
  @@map("photo_public_tags")
}

model PhotoPublicComment {
  id            String      @id @default(uuid())
  text          String
  userId        String      @map("user_id")
  createAt      DateTime    @default(now()) @map("create_at")
  updateAt      DateTime    @updatedAt @map("update_at")
  photoPublic   PhotoPublic @relation(fields: [photoPublicId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  photoPublicId String      @map("photo_public_id")

  @@index([photoPublicId])
  @@map("photo_public_comments")
}

model PhotoPublicLike {
  id            String      @id @default(uuid())
  userId        String      @map("user_id")
  createAt      DateTime    @default(now()) @map("create_at")
  updateAt      DateTime    @updatedAt @map("update_at")
  photoPublic   PhotoPublic @relation(fields: [photoPublicId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  photoPublicId String      @map("photo_public_id")

  @@index([photoPublicId])
  @@map("photo_public_likes")
}

model LinkPublic {
  id          String              @id @default(uuid())
  link        String
  description String
  userId      String              @map("user_id")
  createAt    DateTime            @default(now()) @map("create_at")
  updateAt    DateTime            @updatedAt @map("update_at")
  tags        LinkPublicTag[]
  comments    LinkPublicComment[]
  likes       LinkPublicLike[]

  @@map("link_publics")
}

model LinkPublicTag {
  id          String       @id @default(uuid())
  title       String
  createAt    DateTime     @default(now()) @map("create_at")
  updateAt    DateTime     @updatedAt @map("update_at")
  linkPublics LinkPublic[]

  @@index([title])
  @@map("link_public_tags")
}

model LinkPublicComment {
  id           String     @id @default(uuid())
  text         String
  userId       String     @map("user_id")
  createAt     DateTime   @default(now()) @map("create_at")
  updateAt     DateTime   @updatedAt @map("update_at")
  linkPublic   LinkPublic @relation(fields: [linkPublicId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  linkPublicId String     @map("link_public_id")

  @@index([linkPublicId])
  @@map("link_public_comments")
}

model LinkPublicLike {
  id           String     @id @default(uuid())
  userId       String     @map("user_id")
  createAt     DateTime   @default(now()) @map("create_at")
  updateAt     DateTime   @updatedAt @map("update_at")
  linkPublic   LinkPublic @relation(fields: [linkPublicId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  linkPublicId String     @map("link_public_id")

  @@index([linkPublicId])
  @@map("link_public_likes")
}
